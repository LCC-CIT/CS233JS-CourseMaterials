---
title: HTML Canvas
description: HTML Canvas and more about the Node.js dev toolchain
keywords: Canvas, Node, NPM, Babel, Webpack
generator: Typora
author: Brian Bird
---

<h1>Using the HTML Canvas Element In JavaScript</h1>

**CS233JS Intermediate Programming: JavaScript**

| Topics by Week                                        |                                                     |
| ----------------------------------------------------- | --------------------------------------------------- |
| 1. Intro to Course, Bootstrap and JavaScript Review   | 6. <mark>HTML5 Canvas, CSS Flexbox</mark>           |
| 2. ES6 Classes and Git                                | 7. AJAX, ES6 promises, fetch API                    |
| 3. More about Classes                                 | 8. Making API calls, graphs and charts, Google maps |
| 4. JS Dev Tools: Node.js, NPM, Webpack, LocalStorage. | 9. Term Project                                     |
| 5. Midterm Quiz                                       | 10. Review                                          |
| 11. Final Quiz                                        |                                                     |



<h2>Table of Contents</h2>

[TOC]

## HTML Canvas

### Introduction

The HTML canvas element allows your web applications to dynamically draw graphics on the surface of a web page using code. To do this, you'll typically start by getting a reference to either a 2D or 3D context. You then call various methods on the context object to draw shapes, text, images, and other objects directly on the canvas.

### Setting the Size of the Canvas

#### `width` and  `height` properties

When you assign a value to the `width` and/or `height` properties, it sets the width or height of the canvas element to the specified values in pixels. This also clears the canvas content, resetting it to a blank state with the new dimensions.

**Example:**

```javascript
this.$canvas = document.querySelector('#imgCanvas');
this.$canvas.width = 800; // Sets the canvas width to 800 pixels
this.$canvas.width = 800; // Sets the canvas width to 800 pixels
```



### Getting a Context Object

The canvas context objec" provides methods and properties for drawing and manipulating graphics on the canvas.

The code below gets a reference to a HTML canvas element on a web page, then creates a context object that can be used by JavaScript code to draw in 2D (two dimensions) on the canvas.

```javascript
    this.$canvas = document.querySelector('#imgCanvas');
    this.$context = this.$canvas.getContext('2d');
```



### Some Context Object Properties and Methods

#### Properties

##### `font` 

Sets the current text style to use when drawing text. The value is a string that specifies the font size and font family. 

Example:  `this.$context.font = '12pt sans-serif';`

##### `textAlign`

Sets the alignment of the text relative to the specified x-coordinate. Possible values are `'left'`, `'right'`, `'center'`, `'start'`, and `'end'`. Here, it centers the text horizontally.

Example:  `this.$context.textAlign = 'center';`

##### `textBaseline`

Sets the vertical alignment of the text relative to the y-coordinate. Possible values are `'top'`, `'hanging'`, `'middle'`, `'alphabetic'`, `'ideographic'`, and `'bottom'`. Here, it aligns the text to the top of the y-coordinate.

Example:   `this.$context.textBaseline = 'top';`

##### `lineWidth`

Sets the width of lines for strokes. The value is a number specifying the line width in pixels. 

Example:  `this.$context.lineWidth = 5;`

##### `strokeStyle`

Sets the color or style to use for the lines around shapes (strokes). The value can be a color, gradient, or pattern.

Example:  `this.$context.strokeStyle = 'black';`

##### `fillStyle`

Sets the color or style to use inside shapes (fills). The value can be a color, gradient, or pattern. Here, it sets the fill color to white.

Example:  `this.$context.fillStyle = 'white';`



#### Methods

#####  `clearRect`

 Clears the specified rectangular area, making it fully transparent. This is useful for clearing part or all of the canvas before drawing new content.

Parameters:

- `x`: The x-coordinate of the upper-left corner of the rectangle to clear.

- `y`: The y-coordinate of the upper-left corner of the rectangle to clear.

- width: The width of the rectangle to clear.

- height: The height of the rectangle to clear.

Example:  `this.$context.clearRect(0, 0, this.$canvas.width, this.$canvas.height);`
##### `drawImage`

Draws an image onto the canvas. It can also be used to draw a portion of an image or to scale the image.

Parameters:

- `image`: The image to draw. This can be an `HTMLImageElement`, `HTMLVideoElement`, `HTMLCanvasElement`, or another canvas context.
- `dx`: The x-coordinate in the destination canvas at which to place the top-left corner of the source image.
- `dy`: The y-coordinate in the destination canvas at which to place the top-left corner of the source image.
- `dWidth`: The width to draw the image in the destination canvas. This allows scaling of the image.
- `dHeight`: The height to draw the image in the destination canvas. This allows scaling of the image.

Example: 
`this.$context.drawImage(this.$image, 0, 0, this.$canvas.width, this.$canvas.height);`

##### `strokeText`

The `strokeText` method draws the outlines of the specified text at the given (x, y) position.

Parameters:

- `text`: The text string to be drawn.
- `x`: The x-coordinate of the point at which to begin drawing the text.
- `y`: The y-coordinate of the point at which to begin drawing the text.
- `maxWidth` (optional): The maximum width to draw the text. If specified, the text will be scaled to fit within this width.

Example:` this.$context.strokeText('Hello, World!', 100, 50);`

##### `fillText`

The `fillText` method fills the specified text at the given (x, y) position.

Parameters:

- `text`: The text string to be drawn.
- `x`: The x-coordinate of the point at which to begin drawing the text.
- `y`: The y-coordinate of the point at which to begin drawing the text.
- `maxWidth` (optional): The maximum width to draw the text. If specified, the text will be scaled to fit within this width.

Example:  `this.$context.fillText('Hello, World!', 100, 50);`



## Import

The JavaScript `import` feature was added in ES6. This keyword can be used in statements that import:

- CSS files  
  Example: `import '../css/styles.css';`

- JavaScript modules  
  Example: `import './general';`

  In the Meme creator app in the lab assignment, general.js is being import as a module just just for the "side effect" of importing the CSS files that were imported in general.js



## The `download` Attribute in an Anchor, `<a>` Element

By adding the `download` attribute to the anchor tag, you instruct the browser to download the file instead of opening it. The value of the `download` attribute can be used to specify the default filename for the downloaded file.

**Example:**

`<a href="path/to/your/file.png" download="meme.png">Download Meme</a>`

- The `href` attribute points to the file `file.png`.
- The `download` attribute specifies that the file should be downloaded and suggests the filename `meme.png`.



# References

[JavaScript import declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)&mdash;MDN

[Canvas Tutorial](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial)&mdash;MDN

[FileReader Object](https://developer.mozilla.org/en-US/docs/Web/API/FileReader)&mdash;MDN



---

[![Creative Commons License](https://i.creativecommons.org/l/by-sa/4.0/88x31.png)](http://creativecommons.org/licenses/by-sa/4.0/) Intermediate JavaScript Lecture Notes by [Brian Bird](https://profbird.dev), written in <time>2025</time>, are licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/). 